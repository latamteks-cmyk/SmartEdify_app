services:
  # ===================
  # DATABASES
  # ===================
  
  # PostgreSQL - Main Database
  postgres:
    image: postgres:15-alpine
    container_name: smartedify-postgres
    environment:
      POSTGRES_DB: smartedify
      POSTGRES_USER: smartedify_user
      POSTGRES_PASSWORD: smartedify_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartedify_user -d smartedify"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smartedify-network

  # Redis - Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: smartedify-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smartedify-network

  # ===================
  # CORE SERVICES
  # ===================

  # Identity Service
  identity-service:
    build:
      context: ./services/core/identity-service
      dockerfile: Dockerfile
    container_name: smartedify-identity-service
    environment:
      NODE_ENV: development
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - smartedify-network
    restart: unless-stopped

  # Tenancy Service
  tenancy-service:
    build:
      context: ./services/core/tenancy-service
      dockerfile: Dockerfile
    container_name: smartedify-tenancy-service
    environment:
      NODE_ENV: development
      PORT: 3003
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - smartedify-network
    restart: unless-stopped

  # Finance Service (Simple Version)
  finance-service:
    build:
      context: ./services/operations/finance-service
      dockerfile: Dockerfile.simple
    container_name: smartedify-finance-service
    environment:
      NODE_ENV: development
      PORT: 3007
    ports:
      - "3007:3007"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - smartedify-network
    restart: unless-stopped

  # Compliance Service
  compliance-service:
    build:
      context: ./services/governance/compliance-service
      dockerfile: Dockerfile
    container_name: smartedify-compliance-service
    environment:
      NODE_ENV: development
      PORT: 3012
      FEATURE_LLM_POLICIES: true
      FEATURE_COMPLIANCE_VALIDATION: true
    ports:
      - "3012:3012"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - smartedify-network
    restart: unless-stopped

  # Reservation Service
  reservation-service:
    build:
      context: ./services/operations/reservation-service
      dockerfile: Dockerfile
    container_name: smartedify-reservation-service
    environment:
      NODE_ENV: development
      PORT: 3013
      COMPLIANCE_SERVICE_URL: http://compliance-service:3012
      FINANCE_SERVICE_URL: http://finance-service:3007
      FEATURE_FEES: true
      FEATURE_CHECK_IN: true
      FEATURE_COMPLIANCE_VALIDATION: true
    ports:
      - "3013:3013"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      compliance-service:
        condition: service_healthy
      finance-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - smartedify-network
    restart: unless-stopped

  # Embeddings Service (Mock)
  embeddings-service:
    image: nginx:alpine
    container_name: smartedify-embeddings-service
    ports:
      - "8091:80"
    volumes:
      - ./scripts/mock-embeddings.conf:/etc/nginx/conf.d/default.conf
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - smartedify-network
    restart: unless-stopped

  # Web Admin Frontend
  web-admin:
    build:
      context: ./apps/web-admin
      dockerfile: Dockerfile
    container_name: smartedify-web-admin
    ports:
      - "3100:3100"
    depends_on:
      - identity-service
      - tenancy-service
      - finance-service
      - compliance-service
      - reservation-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - smartedify-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  smartedify-network:
    driver: bridge