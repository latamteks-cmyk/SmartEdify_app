admin:
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address: { address: 0.0.0.0, port_value: 8080 }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              # Gateway-specific endpoints
              - match: { prefix: "/healthz" }
                direct_response:
                  status: 200
                  body: { inline_string: "healthy" }
              - match: { prefix: "/readyz" }
                direct_response:
                  status: 200
                  body: { inline_string: "ready" }

              # OIDC/OAuth2 Endpoints for identity-service
              - match: { prefix: "/authorize" }
                route: { cluster: "identity-service", timeout: 15s }
                typed_per_filter_config:
                  envoy.lua.pkce_validator:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                    source_code:
                      inline_string: |
                        function envoy_on_request(request_handle)
                          local args = request_handle:streamInfo():queryParameters()
                          local code_challenge = args["code_challenge"]
                          local code_challenge_method = args["code_challenge_method"]
                          if code_challenge == nil or code_challenge_method == nil then
                            request_handle:respond(
                              {[":status"] = "400"},
                              "PKCE parameters (code_challenge, code_challenge_method) are required."
                            )
                          end
                        end

              - match: { prefix: "/oauth/" }
                route: { cluster: "identity-service", timeout: 15s }
              - match: { prefix: "/logout" }
                route: { cluster: "identity-service", timeout: 15s }
              - match: { prefix: "/backchannel-logout" }
                route: { cluster: "identity-service", timeout: 15s }
              - match: { prefix: "/.well-known/" }
                route: { cluster: "identity-service", timeout: 15s }

              # Other identity-service endpoints
              - match: { prefix: "/webauthn/" }
                route: { cluster: "identity-service", timeout: 15s }
              - match: { prefix: "/users" }
                route: { cluster: "identity-service", timeout: 15s }
              - match: { prefix: "/identity/v2/" }
                route: { cluster: "identity-service", timeout: 15s }
              - match: { prefix: "/compliance/" }
                route: { cluster: "identity-service", timeout: 15s }
              - match: { prefix: "/privacy/" }
                route: { cluster: "identity-service", timeout: 15s }

              # identity-service
              - match:
                  prefix: "/api/v1/identity/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "identity-service"
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/identity/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "identity-service"
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # governance-service
              - match:
                  prefix: "/api/v1/governance/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "governance-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/governance/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "governance-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # user-profiles-service
              - match:
                  prefix: "/api/v1/user-profiles/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "user-profiles-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/user-profiles/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "user-profiles-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # tenancy-service
              - match:
                  prefix: "/api/v1/tenancy/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "tenancy-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/tenancy/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "tenancy-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # physical-security-service
              - match:
                  prefix: "/api/v1/physical-security/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "physical-security-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/physical-security/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "physical-security-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # notifications-service
              - match:
                  prefix: "/api/v1/notifications/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "notifications-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/notifications/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "notifications-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # documents-service
              - match:
                  prefix: "/api/v1/documents/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "documents-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/documents/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "documents-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # finance-service
              - match:
                  prefix: "/api/v1/finance/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "finance-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/finance/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "finance-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # payroll-service
              - match:
                  prefix: "/api/v1/payroll/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "payroll-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/payroll/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "payroll-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # hr-compliance-service
              - match:
                  prefix: "/api/v1/hr-compliance/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "hr-compliance-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/hr-compliance/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "hr-compliance-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # asset-management-service
              - match:
                  prefix: "/api/v1/asset-management/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "asset-management-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/asset-management/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "asset-management-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # compliance-service
              - match:
                  prefix: "/api/v1/compliance/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "compliance-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/compliance/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "compliance-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # reservation-service
              - match:
                  prefix: "/api/v1/reservation/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "reservation-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/reservation/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "reservation-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # streaming-service
              - match:
                  prefix: "/api/v1/streaming/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "streaming-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/streaming/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "streaming-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # marketplace-service
              - match:
                  prefix: "/api/v1/marketplace/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "marketplace-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/marketplace/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "marketplace-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
              # analytics-service
              - match:
                  prefix: "/api/v1/analytics/"
                  headers:
                  - name: ":method"
                    exact_match: "GET"
                route:
                  cluster: "analytics-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "read"
              - match:
                  prefix: "/api/v1/analytics/"
                  headers:
                  - name: ":method"
                    safe_regex_match:
                      google_re2: {}
                      regex: "POST|PUT|PATCH|DELETE"
                route:
                  cluster: "analytics-service"
                  timeout: 15s
                  rate_limits:
                  - actions:
                    - request_headers:
                        header_name: "x-client-asn"
                        descriptor_key: "client_asn"
                  - actions:
                    - request_headers:
                        header_name: "x-tenant-id"
                        descriptor_key: "tenant_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
                  - actions:
                    - request_headers:
                        header_name: "x-user-id"
                        descriptor_key: "user_id"
                    - generic_key:
                        descriptor_key: "request_type"
                        descriptor_value: "write"
          http_filters:
          # Lua filter for tenant aware authN bootstrap + CORS enforcement + hardening headers
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                local ok, cjson = pcall(require, "cjson.safe")
                if not ok then
                  cjson = require("cjson")
                end

                local cors_config
                local cors_path = os.getenv("CORS_CONFIG") or "/etc/gateway/cors-tenants.json"
                local default_cors = {
                  allow_headers = "Content-Type, Authorization, DPoP",
                  allow_methods = "GET, POST, PUT, PATCH, DELETE",
                  expose_headers = "RateLimit-Limit, RateLimit-Remaining, RateLimit-Reset, Traceparent, X-Request-Id",
                  allow_credentials = true
                }

                local function load_cors(handle)
                  if cors_config ~= nil then
                    return
                  end

                  local fh, err = io.open(cors_path, "r")
                  if not fh then
                    handle:logWarn("CORS config " .. cors_path .. " not readable: " .. tostring(err))
                    cors_config = {}
                    return
                  end

                  local content = fh:read("*a")
                  fh:close()

                  local parsed = decode_json(content)
                  if type(parsed) ~= "table" then
                    handle:logWarn("Invalid CORS config payload")
                    cors_config = {}
                    return
                  end

                  if type(parsed.tenants) == "table" then
                    cors_config = parsed.tenants
                  else
                    cors_config = parsed
                  end
                end

                local b = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

                local function base64url_decode(data)
                  if not data then
                    return nil
                  end

                  data = data:gsub('-', '+'):gsub('_', '/')
                  local padding = #data % 4
                  if padding == 2 then
                    data = data .. "=="
                  elseif padding == 3 then
                    data = data .. "="
                  elseif padding ~= 0 then
                    data = data .. string.rep('=', 4 - padding)
                  end

                  return (data:gsub('.', function(x)
                    if x == '=' then return '' end
                    local r, f = '', (b:find(x) - 1)
                    for i = 6, 1, -1 do
                      r = r .. ((f % 2^i - f % 2^(i-1) > 0) and '1' or '0')
                    end
                    return r
                  end):gsub('%%d%%d%%d%%d%%d%%d%%d%%d', function(x)
                    return string.char(tonumber(x, 2))
                  end))
                end

                local function decode_json(content)
                  if not content then
                    return nil
                  end

                  local success, value = pcall(cjson.decode, content)
                  if success then
                    return value
                  end

                  return nil
                end

                local function decode_jwt(token)
                  if not token then
                    return nil, nil
                  end

                  local header_b64, payload_b64 = token:match("([^.]+)%.([^.]+)%.([^.]+)")
                  if not header_b64 or not payload_b64 then
                    return nil, nil
                  end

                  local header_json = base64url_decode(header_b64)
                  local payload_json = base64url_decode(payload_b64)
                  if not header_json or not payload_json then
                    return nil, nil
                  end

                  local header_tbl = decode_json(header_json)
                  local payload_tbl = decode_json(payload_json)
                  return header_tbl, payload_tbl
                end

                local function find_tenant(payload)
                  if type(payload) ~= "table" then
                    return nil
                  end

                  return payload.tenant_id or payload["tenantId"] or payload["https://smartedify.global/tenant_id"]
                end

                local function normalize_origins(origins)
                  if type(origins) ~= "table" then
                    return {}
                  end

                  local normalized = {}
                  for _, origin in ipairs(origins) do
                    if type(origin) == "string" and origin ~= "" then
                      table.insert(normalized, origin)
                    end
                  end
                  return normalized
                end

                local function origin_allowed(tenant_cfg, origin)
                  if not origin or origin == "" then
                    return false
                  end

                  if type(tenant_cfg) ~= "table" then
                    return false
                  end

                  local origins = normalize_origins(tenant_cfg.origins)
                  for _, rule in ipairs(origins) do
                    if rule:match("^[%%^].*[$]$") then
                      if origin:match(rule) then
                        return true
                      end
                    elseif rule == origin then
                      return true
                    end
                  end

                  return false
                end

                function envoy_on_request(handle)
                  load_cors(handle)

                  local headers = handle:headers()
                  local auth = headers:get("authorization")
                  if auth and auth:match("^[Bb]earer ") then
                    local token = auth:sub(8)
                    local header_tbl, payload_tbl = decode_jwt(token)

                    local stream_meta = handle:streamInfo():dynamicMetadata()
                    if type(header_tbl) == "table" and type(header_tbl.kid) == "string" then
                      headers:replace("x-jwt-kid", header_tbl.kid)
                      stream_meta:set("smartedify.auth", "kid", header_tbl.kid)
                    end

                    local issuer = type(payload_tbl) == "table" and payload_tbl.iss or nil
                    if type(issuer) == "string" then
                      headers:replace("x-jwt-issuer", issuer)
                      stream_meta:set("smartedify.auth", "issuer", issuer)
                    end

                    local tenant_id = find_tenant(payload_tbl)
                    if type(tenant_id) == "string" and tenant_id ~= "" then
                      headers:replace("x-tenant-id", tenant_id)
                      stream_meta:set("smartedify.auth", "tenant_id", tenant_id)
                    end
                  end

                  local tenant_id = headers:get("x-tenant-id")
                  if tenant_id and tenant_id ~= "" then
                    handle:streamInfo():dynamicMetadata():set("smartedify.cors", "tenant_id", tenant_id)
                  end

                  local origin = headers:get("origin")
                  local tenant_cfg = (tenant_id and cors_config and cors_config[tenant_id]) or (cors_config and cors_config["*"])
                  if origin and origin ~= "" then
                    if not tenant_cfg then
                      handle:respond({[":status"] = "403", ["content-type"] = "application/json"}, cjson.encode({
                        error = "forbidden_origin",
                        message = "Origin not allowed for tenant"
                      }))
                      return
                    end

                    local allowed = origin_allowed(tenant_cfg, origin)
                    if not allowed then
                      handle:respond({[":status"] = "403", ["content-type"] = "application/json"}, cjson.encode({
                        error = "forbidden_origin",
                        message = "Origin not allowed for tenant"
                      }))
                      return
                    end

                    local stream_meta = handle:streamInfo():dynamicMetadata()
                    stream_meta:set("smartedify.cors", "allow_origin", origin)
                    stream_meta:set("smartedify.cors", "allow_credentials", tenant_cfg.allow_credentials)
                    stream_meta:set("smartedify.cors", "allow_headers", tenant_cfg.allow_headers or default_cors.allow_headers)
                    stream_meta:set("smartedify.cors", "allow_methods", tenant_cfg.allow_methods or default_cors.allow_methods)
                    stream_meta:set("smartedify.cors", "expose_headers", tenant_cfg.expose_headers or default_cors.expose_headers)

                    if headers:get(":method") == "OPTIONS" then
                      handle:respond({
                        [":status"] = "204",
                        ["access-control-allow-origin"] = origin,
                        ["access-control-allow-methods"] = tenant_cfg.allow_methods or default_cors.allow_methods,
                        ["access-control-allow-headers"] = tenant_cfg.allow_headers or default_cors.allow_headers,
                        ["access-control-allow-credentials"] = (tenant_cfg.allow_credentials == false) and "false" or "true",
                        ["vary"] = "Origin"
                      }, "")
                      return
                    end
                  elseif headers:get(":method") == "OPTIONS" and origin and origin ~= "" then
                    handle:respond({[":status"] = "403"}, "")
                    return
                  end
                end

                function envoy_on_response(handle)
                  local stream_meta = handle:streamInfo():dynamicMetadata():get("smartedify.cors") or {}
                  if stream_meta.allow_origin then
                    handle:headers():replace("Access-Control-Allow-Origin", stream_meta.allow_origin)
                    handle:headers():replace("Vary", "Origin")
                    local allow_credentials = stream_meta.allow_credentials
                    if allow_credentials == false then
                      handle:headers():replace("Access-Control-Allow-Credentials", "false")
                    else
                      handle:headers():replace("Access-Control-Allow-Credentials", "true")
                    end
                    handle:headers():replace("Access-Control-Allow-Methods", stream_meta.allow_methods or default_cors.allow_methods)
                    handle:headers():replace("Access-Control-Allow-Headers", stream_meta.allow_headers or default_cors.allow_headers)
                    handle:headers():replace("Access-Control-Expose-Headers", stream_meta.expose_headers or default_cors.expose_headers)
                  end

                  handle:headers():replace("Strict-Transport-Security","max-age=63072000; includeSubDomains; preload")
                  handle:headers():replace("X-Content-Type-Options","nosniff")
                  handle:headers():replace("Referrer-Policy","no-referrer")
                  handle:headers():replace("Permissions-Policy","camera=(), microphone=()")
                end
          # Header to metadata filter to expose tenant for dynamic JWKS resolution
          - name: envoy.filters.http.header_to_metadata
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.header_to_metadata.v3.Config
              request_rules:
              - header: "x-tenant-id"
                on_header_present:
                  metadata_namespace: "smartedify.auth"
                  key: "tenant_id"
                remove: false
          # CORS filter (methods/headers defined in Lua guard)
          - name: envoy.filters.http.cors
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.CorsPolicy
              allow_methods: "GET, POST, PUT, PATCH, DELETE"
              allow_headers: "Content-Type, Authorization, DPoP"
              expose_headers: "RateLimit-Limit, RateLimit-Remaining, RateLimit-Reset, Traceparent, X-Request-Id"
              allow_credentials: true
          # WASM filter for DPoP
          - name: envoy.filters.http.wasm
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
              config:
                name: dpop_validator
                vm_config: { runtime: "envoy.wasm.runtime.v8", code: { local: { filename: "/etc/envoy/plugins/dpop_validator.wasm" } } }
                configuration:
                  "@type": type.googleapis.com/google.protobuf.StringValue
                  value: '{"replay_cache":{"type":"redis","dsn":"redis://rate-limit:6379","ttl_seconds":300},"iat_skew_seconds":10,"require_on_upgrade":true,"ws_close_code_on_fail":4401}'
          # Dynamic JWT AuthN filter (Lua)
          - name: envoy.lua.jwt_validator
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
              providers:
                smartedify:
                  issuer: "%DYNAMIC_METADATA(smartedify.auth:issuer)%"
                  payload_in_metadata: "smartedify.jwt_payload"
                  claim_to_headers:
                  - header_name: "x-tenant-id"
                    claim_name: "tenant_id"
                    keep_value: true
                  - header_name: "x-jwt-issuer"
                    claim_name: "iss"
                    keep_value: true
                  remote_jwks:
                    http_uri:
                      uri: "http://identity-service:3001/.well-known/jwks.json?tenant_id=%DYNAMIC_METADATA(smartedify.auth:tenant_id)%"
                      cluster: "identity-service"
                      timeout: 3s
                    cache_duration: 300s
                  forward: true
              rules: [{ match: { prefix: "/api/v1/" }, requires: { provider_name: "smartedify" } }]
          # Rate limit filter
          - name: envoy.filters.http.ratelimit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
              domain: "smartedify"
              failure_mode_deny: true
              rate_limit_service: { grpc_service: { envoy_grpc: { cluster_name: ratelimit_cluster } } }
          - name: envoy.filters.http.router
            typed_config: {}

  clusters:
  - name: "identity-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "identity-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: identity-service
                port_value: 3001
  - name: "governance-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "governance-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: governance-service
                port_value: 3011
  - name: "user-profiles-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "user-profiles-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: user-profiles-service
                port_value: 3002
  - name: "tenancy-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "tenancy-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: tenancy-service
                port_value: 3003
  - name: "physical-security-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "physical-security-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: physical-security-service
                port_value: 3004
  - name: "notifications-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "notifications-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: notifications-service
                port_value: 3005
  - name: "documents-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "documents-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: documents-service
                port_value: 3006
  - name: "finance-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "finance-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: finance-service
                port_value: 3007
  - name: "payroll-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "payroll-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: payroll-service
                port_value: 3008
  - name: "hr-compliance-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "hr-compliance-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: hr-compliance-service
                port_value: 3009
  - name: "asset-management-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "asset-management-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: asset-management-service
                port_value: 3010
  - name: "compliance-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "compliance-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: compliance-service
                port_value: 3012
  - name: "reservation-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "reservation-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: reservation-service
                port_value: 3013
  - name: "streaming-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "streaming-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: streaming-service
                port_value: 3014
  - name: "marketplace-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "marketplace-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: marketplace-service
                port_value: 3015
  - name: "analytics-service"
    connect_timeout: 2s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1024
          max_pending_requests: 1024
          max_retries: 3
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 10
    load_assignment:
      cluster_name: "analytics-service"
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: analytics-service
                port_value: 3016
  - name: ratelimit_cluster
    type: STRICT_DNS
    connect_timeout: 0.25s
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: ratelimit_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: ratelimit-service # Assumes a ratelimit service exists
                port_value: 8081