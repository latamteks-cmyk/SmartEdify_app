<<<<<<< HEAD
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: 20
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: smartedify

jobs:
  # Detectar cambios en servicios
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      core-services: ${{ steps.changes.outputs.core-services }}
      governance-services: ${{ steps.changes.outputs.governance-services }}
      operations-services: ${{ steps.changes.outputs.operations-services }}
      business-services: ${{ steps.changes.outputs.business-services }}
      platform: ${{ steps.changes.outputs.platform }}
      contracts: ${{ steps.changes.outputs.contracts }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            core-services:
              - 'services/core/**'
            governance-services:
              - 'services/governance/**'
            operations-services:
              - 'services/operations/**'
            business-services:
              - 'services/business/**'
            platform:
              - 'platform/**'
            contracts:
              - 'contracts/**'

  # Validar contratos OpenAPI
  validate-contracts:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.contracts == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Spectral
        run: npm install -g @stoplight/spectral-cli
      - name: Validate OpenAPI specs
        run: |
          for spec in contracts/openapi/*.yaml; do
            echo "Validating $spec"
            spectral lint "$spec" --ruleset .spectral.yml
          done

  # Build y test para servicios core
  build-core-services:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.core-services == 'true'
    strategy:
      matrix:
        service: [identity-service, user-profiles-service, tenancy-service, notifications-service, documents-service]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: |
          if [ -f "services/core/${{ matrix.service }}/package.json" ]; then
            cd services/core/${{ matrix.service }}
            npm ci
          fi
      - name: Lint
        run: |
          if [ -f "services/core/${{ matrix.service }}/package.json" ]; then
            cd services/core/${{ matrix.service }}
            npm run lint || echo "Lint script not found"
          fi
      - name: Test
        run: |
          if [ -f "services/core/${{ matrix.service }}/package.json" ]; then
            cd services/core/${{ matrix.service }}
            npm run test || echo "Test script not found"
          fi
      - name: Build
        run: |
          if [ -f "services/core/${{ matrix.service }}/package.json" ]; then
            cd services/core/${{ matrix.service }}
            npm run build || echo "Build script not found"
          fi

  # Build y test para servicios governance
  build-governance-services:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.governance-services == 'true'
    strategy:
      matrix:
        service: [governance-service, compliance-service, reservation-service, streaming-service]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: |
          if [ -f "services/governance/${{ matrix.service }}/package.json" ]; then
            cd services/governance/${{ matrix.service }}
            npm ci
          fi
      - name: Lint
        run: |
          if [ -f "services/governance/${{ matrix.service }}/package.json" ]; then
            cd services/governance/${{ matrix.service }}
            npm run lint || echo "Lint script not found"
          fi
      - name: Test
        run: |
          if [ -f "services/governance/${{ matrix.service }}/package.json" ]; then
            cd services/governance/${{ matrix.service }}
            npm run test || echo "Test script not found"
          fi
      - name: Build
        run: |
          if [ -f "services/governance/${{ matrix.service }}/package.json" ]; then
            cd services/governance/${{ matrix.service }}
            npm run build || echo "Build script not found"
          fi

  # Build y test para servicios operations
  build-operations-services:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.operations-services == 'true'
    strategy:
      matrix:
        service: [physical-security-service, finance-service, payroll-service, hr-compliance-service, asset-management-service]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: |
          if [ -f "services/operations/${{ matrix.service }}/package.json" ]; then
            cd services/operations/${{ matrix.service }}
            npm ci
          fi
      - name: Lint
        run: |
          if [ -f "services/operations/${{ matrix.service }}/package.json" ]; then
            cd services/operations/${{ matrix.service }}
            npm run lint || echo "Lint script not found"
          fi
      - name: Test
        run: |
          if [ -f "services/operations/${{ matrix.service }}/package.json" ]; then
            cd services/operations/${{ matrix.service }}
            npm run test || echo "Test script not found"
          fi
      - name: Build
        run: |
          if [ -f "services/operations/${{ matrix.service }}/package.json" ]; then
            cd services/operations/${{ matrix.service }}
            npm run build || echo "Build script not found"
          fi

  # Build y test para servicios business
  build-business-services:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.business-services == 'true'
    strategy:
      matrix:
        service: [marketplace-service, analytics-service]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: |
          if [ -f "services/business/${{ matrix.service }}/package.json" ]; then
            cd services/business/${{ matrix.service }}
            npm ci
          fi
      - name: Lint
        run: |
          if [ -f "services/business/${{ matrix.service }}/package.json" ]; then
            cd services/business/${{ matrix.service }}
            npm run lint || echo "Lint script not found"
          fi
      - name: Test
        run: |
          if [ -f "services/business/${{ matrix.service }}/package.json" ]; then
            cd services/business/${{ matrix.service }}
            npm run test || echo "Test script not found"
          fi
      - name: Build
        run: |
          if [ -f "services/business/${{ matrix.service }}/package.json" ]; then
            cd services/business/${{ matrix.service }}
            npm run build || echo "Build script not found"
          fi

  # Test del Gateway
  test-gateway:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.platform == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Build Gateway
        run: |
          cd platform/gateway
          docker compose build
      - name: Start Gateway
        run: |
          cd platform/gateway
          docker compose up -d
          sleep 30
      - name: Run Gateway Tests
        run: |
          cd platform/gateway
          # Ejecutar tests según el OS
          if [ "$RUNNER_OS" == "Windows" ]; then
            powershell -File scripts/run_tests.ps1
          else
            chmod +x scripts/test_*.sh
            ./scripts/test_gateway.sh
            ./scripts/test_waf.sh
            ./scripts/test_observability.sh
            ./scripts/test_resilience.sh
          fi
      - name: Stop Gateway
        run: |
          cd platform/gateway
          docker compose down

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy (solo en main)
  deploy:
    runs-on: ubuntu-latest
    needs: [build-core-services, build-governance-services, build-operations-services, build-business-services, test-gateway, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Aquí iría la lógica de deployment real
=======
name: CI/CD

on:
  push:
    branches: [main, Identity_final]
  pull_request:
    branches: [main, Identity_final]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
        working-directory: ./smartedify_app/services/support/identity-service
      - name: Lint
        run: npm run lint
        working-directory: ./smartedify_app/services/support/identity-service
      - name: Run tests
        run: npm run test
        working-directory: ./smartedify_app/services/support/identity-service
      - name: Build
        run: npm run build
        working-directory: ./smartedify_app/services/support/identity-service
>>>>>>> origin/main
