name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: 20
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: smartedify

defaults:
  run:
    working-directory: smartedify_app

jobs:
  detect-changes:
    name: Detect service changes
    runs-on: ubuntu-latest
    outputs:
      core-services: ${{ steps.changes.outputs.core-services }}
      governance-services: ${{ steps.changes.outputs.governance-services }}
      operations-services: ${{ steps.changes.outputs.operations-services }}
      business-services: ${{ steps.changes.outputs.business-services }}
      platform: ${{ steps.changes.outputs.platform }}
      contracts: ${{ steps.changes.outputs.contracts }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          working-directory: smartedify_app
          filters: |
            core-services:
              - 'services/core/**'
            governance-services:
              - 'services/governance/**'
            operations-services:
              - 'services/operations/**'
            business-services:
              - 'services/business/**'
            platform:
              - 'platform/**'
            contracts:
              - 'contracts/**'

  validate-contracts:
    name: Validate API contracts
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.contracts == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Spectral
        run: npm install -g @stoplight/spectral-cli
        working-directory: smartedify_app
      - name: Validate OpenAPI specs
        run: |
          for spec in contracts/openapi/*.yaml; do
            echo "Validating $spec"
            spectral lint "$spec" --ruleset ../.spectral.yml
          done

  build-core-services:
    name: Build & test core services
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.core-services == 'true'
    strategy:
      matrix:
        service:
          - identity-service
          - user-profiles-service
          - tenancy-service
          - notifications-service
          - documents-service
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: |
          if [ -f "services/core/${{ matrix.service }}/package.json" ]; then
            cd services/core/${{ matrix.service }}
            npm ci
          fi
      - name: Lint
        run: |
          if [ -f "services/core/${{ matrix.service }}/package.json" ]; then
            cd services/core/${{ matrix.service }}
            npm run lint --if-present
          fi
      - name: Test
        run: |
          if [ -f "services/core/${{ matrix.service }}/package.json" ]; then
            cd services/core/${{ matrix.service }}
            npm test --if-present
          fi
      - name: Build
        run: |
          if [ -f "services/core/${{ matrix.service }}/package.json" ]; then
            cd services/core/${{ matrix.service }}
            npm run build --if-present
          fi

  build-governance-services:
    name: Build & test governance services
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.governance-services == 'true'
    strategy:
      matrix:
        service:
          - governance-service
          - compliance-service
          - reservation-service
          - streaming-service
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: |
          if [ -f "services/governance/${{ matrix.service }}/package.json" ]; then
            cd services/governance/${{ matrix.service }}
            npm ci
          fi
      - name: Lint
        run: |
          if [ -f "services/governance/${{ matrix.service }}/package.json" ]; then
            cd services/governance/${{ matrix.service }}
            npm run lint --if-present
          fi
      - name: Test
        run: |
          if [ -f "services/governance/${{ matrix.service }}/package.json" ]; then
            cd services/governance/${{ matrix.service }}
            npm test --if-present
          fi
      - name: Build
        run: |
          if [ -f "services/governance/${{ matrix.service }}/package.json" ]; then
            cd services/governance/${{ matrix.service }}
            npm run build --if-present
          fi

  build-operations-services:
    name: Build & test operations services
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.operations-services == 'true'
    strategy:
      matrix:
        service:
          - physical-security-service
          - finance-service
          - payroll-service
          - hr-compliance-service
          - asset-management-service
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: |
          if [ -f "services/operations/${{ matrix.service }}/package.json" ]; then
            cd services/operations/${{ matrix.service }}
            npm ci
          fi
      - name: Lint
        run: |
          if [ -f "services/operations/${{ matrix.service }}/package.json" ]; then
            cd services/operations/${{ matrix.service }}
            npm run lint --if-present
          fi
      - name: Test
        run: |
          if [ -f "services/operations/${{ matrix.service }}/package.json" ]; then
            cd services/operations/${{ matrix.service }}
            npm test --if-present
          fi
      - name: Build
        run: |
          if [ -f "services/operations/${{ matrix.service }}/package.json" ]; then
            cd services/operations/${{ matrix.service }}
            npm run build --if-present
          fi

  build-business-services:
    name: Build & test business services
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.business-services == 'true'
    strategy:
      matrix:
        service:
          - marketplace-service
          - analytics-service
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: |
          if [ -f "services/business/${{ matrix.service }}/package.json" ]; then
            cd services/business/${{ matrix.service }}
            npm ci
          fi
      - name: Lint
        run: |
          if [ -f "services/business/${{ matrix.service }}/package.json" ]; then
            cd services/business/${{ matrix.service }}
            npm run lint --if-present
          fi
      - name: Test
        run: |
          if [ -f "services/business/${{ matrix.service }}/package.json" ]; then
            cd services/business/${{ matrix.service }}
            npm test --if-present
          fi
      - name: Build
        run: |
          if [ -f "services/business/${{ matrix.service }}/package.json" ]; then
            cd services/business/${{ matrix.service }}
            npm run build --if-present
          fi

  test-gateway:
    name: Gateway integration tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.platform == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Build gateway stack
        run: |
          cd platform/gateway
          docker compose build
      - name: Start gateway stack
        run: |
          cd platform/gateway
          docker compose up -d
          sleep 30
      - name: Run gateway test suite
        run: |
          cd platform/gateway
          if [ "$RUNNER_OS" = "Windows" ]; then
            powershell -File scripts/run_tests.ps1
          else
            chmod +x scripts/test_*.sh
            ./scripts/test_gateway.sh
            ./scripts/test_waf.sh
            ./scripts/test_observability.sh
            ./scripts/test_resilience.sh
          fi
      - name: Stop gateway stack
        if: always()
        run: |
          cd platform/gateway
          docker compose down

  security-scan:
    name: Security scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: '.'
          format: sarif
          output: trivy-results.sarif
      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  deploy:
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs:
      - build-core-services
      - build-governance-services
      - build-operations-services
      - build-business-services
      - test-gateway
      - security-scan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Deployment steps go here
